import * as fs from 'fs';

const filePath = './src/open-api/schema.ts';

function processFile(filePath: string) {
  try {
    const fileContent = fs.readFileSync(filePath, 'utf-8');

    const lines = fileContent.split('\n');

    const foundLines = [];
    let objTitle = '';

    for (let i = 0; i < lines.length; i++) {
      const line = lines[i].trim();

      if (line.startsWith('/** @enum {string} */')) {
        const nextLine = lines[i + 1].trim();
        for (let c = i; c > 0; c--) {
          const element = lines[c].trim();

          if (element.endsWith(': {')) {
            objTitle = removeColonBraceFromString(element);
            break;
          }
        }
        foundLines.push({ line: nextLine, title: objTitle });
      }
    }

    return foundLines;
  } catch (err) {
    console.error('Failed to read file:', err);
  }
}

function removeColonBraceFromString(inputString: string) {
  // Remove ': {'
  const regex = /:\s*{/g;
  const cleanedString = inputString.replace(regex, '');

  return cleanedString;
}

const foundLines: any = processFile(filePath);
fs.appendFileSync(
  filePath,
  `
  /**
   * This is auto generated by the command g-enum, check ./package.json and ./src/add-enums-to-schema.ts into Villagers
   * Do not make direct changes to this.
   */`,
);
foundLines.forEach((obj: { line: string; title: string }) => {
  const lineT = obj.line.split(':');

  const values = lineT[1].split('|').map((c) => c.trim());

  let env = '';

  values.forEach((v) => {
    const d = `${v.toUpperCase()} = ${v},`.replaceAll(';', '');
    env += d;
  });

  const en = `
    export enum ${obj.title.toUpperCase()}_${lineT[0].toUpperCase()} {
        ${env}
    }
    `;

  fs.appendFileSync(filePath, en);
});
